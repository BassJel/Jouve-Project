<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
	version="1.0">
	<!--
		<persistence-unit name="constellio-test"
		transaction-type="RESOURCE_LOCAL">
	-->
	<persistence-unit name="constellio" transaction-type="RESOURCE_LOCAL">
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<!--
			<jar-file>file://C:\dev\workspace_constellio\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\constellio\WEB-INF\plugins\kea\kea.jar</jar-file>
		-->

		<properties>
			<property name="hibernate.show_sql" value="false" />
			<property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
			<property name="hibernate.connection.driver_class" value="org.hsqldb.jdbcDriver" />
			<property name="hibernate.connection.url"
				value="jdbc:hsqldb:${constellioDirFrontSlash}/WEB-INF/db/constellio_hsqldb;shutdown=true;hsqldb.tx=mvcc" />
			<property name="hibernate.max_fetch_depth" value="3" />
			<property name="hibernate.hbm2ddl.auto" value="update" />
			<property name="org.hibernate.FlushMode" value="auto" />

			<!--  Connection pool -->
			<property name="hibernate.connection.provider_class" value="org.hibernate.connection.C3P0ConnectionProvider" />
			<property name="hibernate.c3p0.idle_test_period" value="3000" />
			<property name="hibernate.c3p0.preferredTestQuery" value="SELECT 1;" />
			<property name="hibernate.c3p0.min_size" value="1" />
			<property name="hibernate.c3p0.max_size" value="100" />
			<property name="hibernate.c3p0.timeout" value="300" />
			<property name="hibernate.c3p0.max_statements" value="50" />


			<!-- cache configuration  -->
			<!--
				<property
				name="hibernate.ejb.classcache.org.hibernate.ejb.test.Item"
				value="read-write"/> <property
				name="hibernate.ejb.collectioncache.org.hibernate.ejb.test.Item.distributors"
				value="read-write, RegionName"/>
			-->
			<!--
				alternatively to <class> and <property> declarations, you can use a
				regular hibernate.cfg.xml file
			-->
			<!--
				property name="hibernate.ejb.cfgfile"
				value="/org/hibernate/ejb/test/hibernate.cfg.xml"/
			-->

			<!--
				If you want to enable the collection of statistics through the
				configuration, and not programmatically, set the
				hibernate.generate_statistics configuration property to true.
			-->

			<!--
				Another, sometimes useful, trick is to make configuration options
				more dynamic with system properties: ... <property
				name="show_sql">${displaysql}</property> ... You can now specify a
				system property, such as with java -displaysql=true, on the command
				line when you start your application, and this will automatically be
				applied to the Hibernate configuration property.
			-->

			<!--
				Finally, the Hibernate configuration setting archive.autodetection
				tells Hibernate what metadata to scan for automatically: annotated
				classes (class) and/or Hibernate XML mapping files (hbm).
			-->
		</properties>
	</persistence-unit>
</persistence>